import pygame
from pygame.locals import *
import random
"""Игровое поле, необходимое для игры <<Жизнь>>"""
class GameOfLife:
    def __init__(self, width=640, height=480, cell_size=10, speed=10):
        self.width = width
        self.height = height
        self.cell_size = cell_size
        self.speed = speed # скорость протекания игры
        # Вычисляем количество ячеек по вертикали и горизонтали
        self.cell_height = self.height // self.cell_size
        self.cell_width = self.width // self.cell_size
        # создание нового экрана
        self.screen = pygame.display.set_mode((width, height))

    def draw_grid(self):
        for x in range(0, self.width, self.cell_size):
            pygame.draw.line(self.screen, Color('black'), # рисуем линии на экране
                             (x, 0), (x, self.height))
        for y in range(0, self.height, self.cell_size):
            pygame.draw.line(self.screen, Color('black'), # рисуем линии на экране
                             (0, y), (self.width, y))

    def run(self):
        window = pygame.init() # инициализируем окно pygame
        clock = pygame.time.Clock()
        pygame.display.set_caption("Game of Life") # заголовок игры
        self.screen.fill(Color("white")) # заливка поле белым цветом
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == QUIT:
                    running = False
        self.draw_grid()
        self.draw_cell_list(window) # инициализируем окно pygame
        pygame.display.flip()
        clock.tick(self.speed)

        quit()

    def cell_list(self, randomize=False):# Зеленые клетки - живые, белые клетки - мертвые
        self.list_nums = [[random.randint(0, 1) for num in range(self.cell_height)] for num in range(self.cell_width)]
        return self.list_nums

    def draw_cell_list(self, rects):
        ind = 0
        for num in rects:
            if ind < self.cell_height:
                if num[ind] == '0':
                    pygame.draw.rect(self.screen, pygame.Color('white'), num[ind])
                else:
                    pygame.draw.rect(self.screen, pygame.Color('green'), num[ind])
            ind += 1
        return rects

    def get_neighbors(self, index, cell):
        # Вычисляем строку и столбец из индекса
        row = index // cell
        column = index % cell
        # Инициализируем список для хранения индексов соседних клеток
        neighbors = []

        # Проходим по всем возможным соседям
        for i in range(row - 1, row + 2):  # r - 1, r, r + 1
            for j in range(column - 1, column + 2):  # c - 1, c, c + 1
                # Проверяем, чтобы не выйти за пределы поля
                if 0 <= i < row and 0 <= j < column:
                    # Проверяем, чтобы не добавить саму клетку
                    if i != row or j != column:
                        # Вычисляем индекс соседа и добавляем его в список
                        neighbor_index = i * column + j
                        neighbors.append(neighbor_index)

        return neighbors

    def update_cell_list(self, scr: pygame.Surface, cell_list): # обновляем состояние всех клеток
        for cell in cell_list:
            cell.render(scr)


class Cell:
    def __init__(self, row, col, state=False):
        self.row = row
        self.col = col

    def is_alive(self, screen):
        return screen[self.row][self.col] == 1

class CellList:
    def __init__(self, nrows, ncols, randomize=False):
        self.nrows = nrows
        self.ncols = ncols

    def update(self):
        pygame.display.set_mode()

    def get_neighbours(self, cell, index):
        row = index // cell
        column = index % cell
        # Инициализируем список для хранения индексов соседних клеток
        neighbors = []

        # Проходим по всем возможным соседям
        for i in range(row - 1, row + 2):  # r - 1, r, r + 1
            for j in range(column - 1, column + 2):  # c - 1, c, c + 1
                # Проверяем, чтобы не выйти за пределы поля
                if 0 <= i < row and 0 <= j < column:
                    # Проверяем, чтобы не добавить саму клетку
                    if i != row or j != column:
                        # Вычисляем индекс соседа и добавляем его в список
                        neighbor_index = i * column + j
                        neighbors.append(neighbor_index)

        return neighbors

    @classmethod
    def from_file(cls, filename):
        return cls

    def __iter__(self):
        return self.__iter__()

    def __next__(self):
        return self.__next__()

    def __str__(self):
        return self.__str__()

if __name__ == '__main__':
    game = GameOfLife(640, 480, 20)
    game.run()
