import igraph
import requests
from datetime import *
from igraph import Graph, plot
import numpy as np
res = []
cnt = 0
def get_friends(user_id, fields): # список друзей для фильтрации у конкретного человека
    """Фильтруем пользователей по user_id, дате рождения"""
    assert isinstance(user_id, int), "user_id must be positive integer"
    assert isinstance(fields, str), "fields must be string"
    assert user_id > 0, "user_id must be positive integer"
    # Получим список друзей благодаря следующему коду:
    domain = "https://api.vk.com/method"
    access_token = "0c0eb4820c0eb4820c0eb482c60f20325a00c0e0c0eb4826be0c329ef850a0c48970169"  # сервисный ключ доступа
    user_id = 53380824  # user_id приложения

    query_params = {
        'domain': domain,
        'access_token': access_token,
        'user_id': user_id,
        'fields': 'sex'
    }

    query = "{domain}/friends.get?access_token={access_token}&user_id={user_id}&fields={fields}&v=5.53".format(
        **query_params)
    response = requests.get(query)  # получаем пользователя
    print(response.json()['response']['items']['first_name'], sep='\n')

"""Функция для получения ответа от get-запроса"""
def get(url, params={}, timeout=5, max_retries=5, backoff_factor=0.3):
    """ Выполнить GET-запрос

    :param url: адрес, на который необходимо выполнить запрос
    :param params: параметры запроса
    :param timeout: максимальное время ожидания ответа от сервера
    :param max_retries: максимальное число повторных запросов
    :param backoff_factor: коэффициент экспоненциального нарастания задержки
    """
    res = []
    for i in range(max_retries):
        res.append(requests.get(url,timeout=timeout+backoff_factor))
        backoff_factor += 0.3
    print(*res, sep='\n')

def age_predict(user_id):
    assert isinstance(user_id, int), "user_id must be positive integer"
    assert user_id > 0, "user_id must be positive integer"
    domain = "https://api.vk.com/method"
    access_token = "0c0eb4820c0eb4820c0eb482c60f20325a00c0e0c0eb4826be0c329ef850a0c48970169"  # сервисный ключ доступа

    query_params = {
        'domain': domain,
        'access_token': access_token,
        'user_id': user_id,
        'fields': 'sex'
    }

    query = "{domain}/friends.get?access_token={access_token}&user_id={user_id}&fields={fields}&v=5.53".format(
        **query_params)
    response = requests.get(query)  # получаем пользователя
    try:
        res = []
        cnt_users = response.json()['response']['count']
        for i in range(cnt_users):
            birthdate = response.json()['response']['items']
            res.append(date.today().year-birthdate['birthdate'][2])
        return sum(res)/len(res)
    except:
        pass

def messages_get_history(user_id, offset=0, count=20):
    assert isinstance(user_id, int), "user_id must be positive integer"
    assert user_id > 0, "user_id must be positive integer"
    assert isinstance(offset, int), "offset must be positive integer"
    assert offset >= 0, "user_id must be positive integer"
    assert count >= 0, "user_id must be positive integer"
    domain = "https://api.vk.com/method"
    access_token = "0c0eb4820c0eb4820c0eb482c60f20325a00c0e0c0eb4826be0c329ef850a0c48970169" # PUT YOUR ACCESS TOKEN HERE

    query_params = {
        'domain': domain,
        'access_token': access_token,
        'user_id': user_id,
        'fields': 'sex'
    }

    query = "{domain}/friends.get?access_token={access_token}&user_id={user_id}&fields={fields}&v=5.53".format(
        **query_params)
    global response
    response = requests.get(query)
    response = response.json().replace(response.json()['response']['items']['date'], datetime.fromtimestamp(response.json()['date']).strftime("%Y-%m-%d"))
    return response.json()['response']['items']

def count_dates_from_messages(messages):
    res_data, res_count_data = [], {} # список даты каждого сообщения, список частоты даты для каждго сообщения
    i = 0
    for message in messages:
        if message in response.json()['response']['items'][i]['body']:
            res_data.append(response.json()['response']['items'][i]['date'])
            res_count_data[response.json()['response']['items'][i]['date']] += 1
        i += 1
    return res_data, res_count_data

"""Строит граф по результатам списка users_ids и представляет матрицу as_edgelist"""
def get_network(users_ids, as_edgelist=True):
    edges = [
        (0, 2), (0, 1), (0, 3),
        (1, 0), (1, 2), (1, 3),
        (2, 0), (2, 1), (2, 3), (2, 4),
        (3, 0), (3, 1), (3, 2),
        (4, 5), (4, 6),
        (5, 4), (5, 6),
        (6, 4), (6, 5)
    ]

    g = Graph(vertex_attrs={"label": users_ids},
              edges=edges, directed=False)

    N = len(users_ids)
    visual_style = {}
    visual_style["layout"] = g.layout_fruchterman_reingold(
        maxiter=1000,
        area=N ** 3,
        repulserad=N ** 3)

    plot(g, **visual_style)

    communities = g.community_edge_betweenness(directed=False)
    clusters = communities.as_clustering()
    print(clusters)
    pal = igraph.drawing.colors.ClusterColoringPalette(len(clusters))
    g.vs['color'] = pal.get_many(clusters.membership)
